export interface Box<T> {
    current: T;
}
export declare type Unsubscribe = () => void;
export declare class Subscriptions<CallbackType> {
    private callbacks;
    add(fn: CallbackType): Unsubscribe;
    isEmpty(): boolean;
    forEach(callback: (cb: CallbackType) => void): void;
}
export declare function memoizeLatest<Input, Output>(fn: (i: Input) => Output): (i: Input) => Output;
export interface MapLike<K, V> {
    get(key: K): V | undefined;
    set(key: K, value: V): void;
    has(k: K): boolean;
    readonly size: number;
    [Symbol.iterator](): IterableIterator<[K, V]>;
    keys(): IterableIterator<K>;
    values(): IterableIterator<V>;
}
export declare type MapFactory<K, V> = () => Map<K, V>;
export declare function defaultMapFactory<K, V>(): Map<K, V>;
