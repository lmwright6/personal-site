import { MapFactory } from './utils';
import { Watchable, WatchableSubject } from './watchable';
export declare class WatchableMap<K, V> {
    private equalityFn;
    private readonly underlying;
    constructor(equalityFn?: (a: V, b: V) => boolean, mapMaker?: MapFactory<K, WatchableSubject<V>>);
    keys(): IterableIterator<K>;
    getOrCreate(key: K): Watchable<V>;
    getIfExists(key: K): Watchable<V> | null;
    getOrCreateWithValue(key: K, defaultValue: V): Watchable<V>;
    updateOrCreate(key: K, value: (v?: V) => V): void;
    updateIfMissing(key: K, value: V): void;
    updateOrCreateWithValue(key: K, value: V): void;
    updateIfExists(key: K, updateFn: (old?: V) => V): void;
    [Symbol.iterator](): IterableIterator<[K, WatchableSubject<V>]>;
    private getOrCreateSubject;
}
